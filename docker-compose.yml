volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:

networks:
  main:

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "5"

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['main']
  restart: unless-stopped
  environment:
    # ---- database ----
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}

    # ---- security / production ----
    - NODE_ENV=${NODE_ENV}
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
    - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
    - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
    - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
    - N8N_PERSONALIZATION_ENABLED=${N8N_PERSONALIZATION_ENABLED}
    - N8N_PUBLIC_API_DISABLED=${N8N_PUBLIC_API_DISABLED}
    - N8N_PUBLIC_API_SWAGGERUI_DISABLED=${N8N_PUBLIC_API_SWAGGERUI_DISABLED}
    - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED}
    - N8N_VERSION_NOTIFICATIONS_ENABLED=${N8N_VERSION_NOTIFICATIONS_ENABLED}
    - N8N_TEMPLATES_ENABLED=${N8N_TEMPLATES_ENABLED}
    - EXTERNAL_FRONTEND_HOOKS_URLS=${EXTERNAL_FRONTEND_HOOKS_URLS}
    - N8N_DIAGNOSTICS_CONFIG_FRONTEND=${N8N_DIAGNOSTICS_CONFIG_FRONTEND}
    - N8N_DIAGNOSTICS_CONFIG_BACKEND=${N8N_DIAGNOSTICS_CONFIG_BACKEND}

    # ---- external task runners ----
    - N8N_RUNNERS_ENABLED=${N8N_RUNNERS_ENABLED}
    - N8N_RUNNERS_MODE=${N8N_RUNNERS_MODE}
    - N8N_RUNNERS_AUTH_TOKEN=${N8N_RUNNERS_AUTH_TOKEN}
    - N8N_NATIVE_PYTHON_RUNNER=${N8N_NATIVE_PYTHON_RUNNER}

    # ---- URLs (behind reverse proxy) ----
    - N8N_HOST=${N8N_HOST}
    - N8N_PROTOCOL=${N8N_PROTOCOL}
    - WEBHOOK_URL=${WEBHOOK_URL}
    - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}

    # ---- execution retention (prune to keep DB small) ----
    - EXECUTIONS_DATA_SAVE_ON_ERROR=${EXECUTIONS_DATA_SAVE_ON_ERROR}
    - EXECUTIONS_DATA_SAVE_ON_SUCCESS=${EXECUTIONS_DATA_SAVE_ON_SUCCESS}
    - EXECUTIONS_DATA_PRUNE=${EXECUTIONS_DATA_PRUNE}
    - EXECUTIONS_DATA_MAX_AGE=${EXECUTIONS_DATA_MAX_AGE}
    - EXECUTIONS_DATA_PRUNE_MAX_COUNT=${EXECUTIONS_DATA_PRUNE_MAX_COUNT}

    # ---- binary data mode (optional) ----
    - N8N_DEFAULT_BINARY_DATA_MODE=${N8N_DEFAULT_BINARY_DATA_MODE}

    # ---- Ollama endpoint ----
    - OLLAMA_HOST=${OLLAMA_HOST}

    # ---- timezone ----
    - TZ=${TZ}
  env_file:
    - path: .env
      required: true
  logging: *default-logging

x-task-runners: &service-task-runners
  image: n8nio/n8n:latest
  networks: ['main']
  restart: unless-stopped
  environment:
    - N8N_RUNNERS_AUTH_TOKEN=${N8N_RUNNERS_AUTH_TOKEN}
    - N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT=${N8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT}
  env_file:
    - path: .env
      required: true
  logging: *default-logging

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['main']
  restart: unless-stopped
  ports:
    - "127.0.0.1:11434:11434"
  volumes:
    - ollama_storage:/root/.ollama
  environment:
    - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE}
    - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL}
    - OLLAMA_KV_CACHE_TYPE=${OLLAMA_KV_CACHE_TYPE}
    - OLLAMA_CONTEXT_LENGTH=${OLLAMA_CONTEXT_LENGTH}
    - OLLAMA_FLASH_ATTENTION=${OLLAMA_FLASH_ATTENTION}
    - TZ=${TZ}
  healthcheck:
    test: ["CMD", "ollama", "list"]
    interval: 10s
    timeout: 5s
    retries: 20
  logging: *default-logging

# Init job that pulls the desired model defined via the environment
x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['main']
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
    - TZ=${TZ}
  command:
    - "-c"
    - "sleep 3; ollama pull ${OLLAMA_DEFAULT_MODEL}"
  logging: *default-logging

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['main']
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=${TZ}
      - PGTZ=${TZ}
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    logging: *default-logging

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    # bind editor on localhost if youâ€™ll front it with a reverse proxy like Caddy/Traefik
    ports:
      - "127.0.0.1:5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      # Ensure Ollama is up and the model was pulled before n8n starts
      ollama-gpu:
        condition: service_healthy
      ollama-pull-default-model-gpu:
        condition: service_completed_successfully
    logging: *default-logging

  task-runners:
    <<: *service-task-runners
    container_name: n8n-runners
    depends_on:
      - n8n

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['main']
    restart: unless-stopped
    ports:
      - "127.0.0.1:6333:6333"
    environment:
      - QDRANT__TELEMETRY_DISABLED=true
      - QDRANT__SERVICE__ENABLE_CORS=false
      - TZ=${TZ}
    volumes:
      - qdrant_storage:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:6333/readyz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
    logging: *default-logging

  # ---- OLLAMA VARIANTS ----

  # CPU (optional portability)
  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  # NVIDIA GPU (target)
  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # ---- PULL JOBS (per profile) ----

  ollama-pull-default-model-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      ollama-cpu:
        condition: service_started

  ollama-pull-default-model-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      ollama-gpu:
        condition: service_started
